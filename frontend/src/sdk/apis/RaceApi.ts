/* tslint:disable */
/* eslint-disable */
/**
 * Horse Races
 * Horse Races api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRaceDto,
  Race,
} from '../models/index';
import {
    CreateRaceDtoFromJSON,
    CreateRaceDtoToJSON,
    RaceFromJSON,
    RaceToJSON,
} from '../models/index';

export interface RaceControllerCreateRequest {
    createRaceDto: CreateRaceDto;
}

export interface RaceControllerFindOneRequest {
    id: string;
}

export interface RaceControllerRemoveRequest {
    id: string;
}

export interface RaceControllerStartRaceRequest {
    id: number;
}

export interface RaceControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 * 
 */
export class RaceApi extends runtime.BaseAPI {

    /**
     */
    async raceControllerCreateRaw(requestParameters: RaceControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Race>> {
        if (requestParameters['createRaceDto'] == null) {
            throw new runtime.RequiredError(
                'createRaceDto',
                'Required parameter "createRaceDto" was null or undefined when calling raceControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/race`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRaceDtoToJSON(requestParameters['createRaceDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaceFromJSON(jsonValue));
    }

    /**
     */
    async raceControllerCreate(requestParameters: RaceControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Race> {
        const response = await this.raceControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async raceControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Race>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/race`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RaceFromJSON));
    }

    /**
     */
    async raceControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Race>> {
        const response = await this.raceControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async raceControllerFindOneRaw(requestParameters: RaceControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Race>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling raceControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/race/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaceFromJSON(jsonValue));
    }

    /**
     */
    async raceControllerFindOne(requestParameters: RaceControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Race> {
        const response = await this.raceControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async raceControllerRemoveRaw(requestParameters: RaceControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling raceControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/race/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async raceControllerRemove(requestParameters: RaceControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.raceControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async raceControllerStartRaceRaw(requestParameters: RaceControllerStartRaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling raceControllerStartRace().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/race/{id}/start`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async raceControllerStartRace(requestParameters: RaceControllerStartRaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.raceControllerStartRaceRaw(requestParameters, initOverrides);
    }

    /**
     */
    async raceControllerUpdateRaw(requestParameters: RaceControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Race>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling raceControllerUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling raceControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/race/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RaceFromJSON(jsonValue));
    }

    /**
     */
    async raceControllerUpdate(requestParameters: RaceControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Race> {
        const response = await this.raceControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
