// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { AppControllerGetHelloError, AppControllerGetHelloResponse, UserControllerFindAllError, UserControllerFindAllResponse, UserControllerCreateData, UserControllerCreateError, UserControllerCreateResponse, UserControllerRemoveData, UserControllerRemoveError, UserControllerRemoveResponse, UserControllerFindOneData, UserControllerFindOneError, UserControllerFindOneResponse, UserControllerUpdateData, UserControllerUpdateError, UserControllerUpdateResponse, HorseControllerFindAllError, HorseControllerFindAllResponse, HorseControllerCreateData, HorseControllerCreateError, HorseControllerCreateResponse, HorseControllerRemoveData, HorseControllerRemoveError, HorseControllerRemoveResponse, HorseControllerFindOneData, HorseControllerFindOneError, HorseControllerFindOneResponse, HorseControllerUpdateData, HorseControllerUpdateError, HorseControllerUpdateResponse, HorseControllerEnterRaceData, HorseControllerEnterRaceError, HorseControllerEnterRaceResponse, RaceControllerFindAllError, RaceControllerFindAllResponse, RaceControllerCreateData, RaceControllerCreateError, RaceControllerCreateResponse, RaceControllerRemoveData, RaceControllerRemoveError, RaceControllerRemoveResponse, RaceControllerFindOneData, RaceControllerFindOneError, RaceControllerFindOneResponse, RaceControllerUpdateData, RaceControllerUpdateError, RaceControllerUpdateResponse, RaceControllerStartRaceData, RaceControllerStartRaceError, RaceControllerStartRaceResponse } from './types.gen';

export const client = createClient(createConfig({baseUrl: 'http://localhost:3000'}));

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<AppControllerGetHelloResponse, AppControllerGetHelloError, ThrowOnError>({
        ...options,
        url: '/'
    });
};

export const userControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<UserControllerFindAllResponse, UserControllerFindAllError, ThrowOnError>({
        ...options,
        url: '/user'
    });
};

export const userControllerCreate = <ThrowOnError extends boolean = false>(options: Options<UserControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<UserControllerCreateResponse, UserControllerCreateError, ThrowOnError>({
        ...options,
        url: '/user'
    });
};

export const userControllerRemove = <ThrowOnError extends boolean = false>(options: Options<UserControllerRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).delete<UserControllerRemoveResponse, UserControllerRemoveError, ThrowOnError>({
        ...options,
        url: '/user/{id}'
    });
};

export const userControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<UserControllerFindOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserControllerFindOneResponse, UserControllerFindOneError, ThrowOnError>({
        ...options,
        url: '/user/{id}'
    });
};

export const userControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<UserControllerUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UserControllerUpdateResponse, UserControllerUpdateError, ThrowOnError>({
        ...options,
        url: '/user/{id}'
    });
};

export const horseControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<HorseControllerFindAllResponse, HorseControllerFindAllError, ThrowOnError>({
        ...options,
        url: '/horse'
    });
};

export const horseControllerCreate = <ThrowOnError extends boolean = false>(options: Options<HorseControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<HorseControllerCreateResponse, HorseControllerCreateError, ThrowOnError>({
        ...options,
        url: '/horse'
    });
};

export const horseControllerRemove = <ThrowOnError extends boolean = false>(options: Options<HorseControllerRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).delete<HorseControllerRemoveResponse, HorseControllerRemoveError, ThrowOnError>({
        ...options,
        url: '/horse/{id}'
    });
};

export const horseControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<HorseControllerFindOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<HorseControllerFindOneResponse, HorseControllerFindOneError, ThrowOnError>({
        ...options,
        url: '/horse/{id}'
    });
};

export const horseControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<HorseControllerUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<HorseControllerUpdateResponse, HorseControllerUpdateError, ThrowOnError>({
        ...options,
        url: '/horse/{id}'
    });
};

export const horseControllerEnterRace = <ThrowOnError extends boolean = false>(options: Options<HorseControllerEnterRaceData, ThrowOnError>) => {
    return (options?.client ?? client).post<HorseControllerEnterRaceResponse, HorseControllerEnterRaceError, ThrowOnError>({
        ...options,
        url: '/horse/{horseId}/enter-race/{raceId}'
    });
};

export const raceControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<RaceControllerFindAllResponse, RaceControllerFindAllError, ThrowOnError>({
        ...options,
        url: '/race'
    });
};

export const raceControllerCreate = <ThrowOnError extends boolean = false>(options: Options<RaceControllerCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<RaceControllerCreateResponse, RaceControllerCreateError, ThrowOnError>({
        ...options,
        url: '/race'
    });
};

export const raceControllerRemove = <ThrowOnError extends boolean = false>(options: Options<RaceControllerRemoveData, ThrowOnError>) => {
    return (options?.client ?? client).delete<RaceControllerRemoveResponse, RaceControllerRemoveError, ThrowOnError>({
        ...options,
        url: '/race/{id}'
    });
};

export const raceControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<RaceControllerFindOneData, ThrowOnError>) => {
    return (options?.client ?? client).get<RaceControllerFindOneResponse, RaceControllerFindOneError, ThrowOnError>({
        ...options,
        url: '/race/{id}'
    });
};

export const raceControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<RaceControllerUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<RaceControllerUpdateResponse, RaceControllerUpdateError, ThrowOnError>({
        ...options,
        url: '/race/{id}'
    });
};

export const raceControllerStartRace = <ThrowOnError extends boolean = false>(options: Options<RaceControllerStartRaceData, ThrowOnError>) => {
    return (options?.client ?? client).post<RaceControllerStartRaceResponse, RaceControllerStartRaceError, ThrowOnError>({
        ...options,
        url: '/race/{id}/start'
    });
};